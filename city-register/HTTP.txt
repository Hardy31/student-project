
Выпуск 102. Передача параметров по HTTP - все не так просто.
https://www.youtube.com/watch?v=6xFkCVuGhTE&list=PLyxk-1FCKqockmP-fXZmHQ7UlYP3qvZRa&index=102





Выпуск 103. Что такое ReST - основы и первая программа.
https://www.youtube.com/watch?v=3nuu7-aBTco&list=PLyxk-1FCKqockmP-fXZmHQ7UlYP3qvZRa&index=103
REST (от англ. Representational State Transfer — «передача репрезентативного состояния» или «передача „самоописываемого“ состояния») —
архитектурный стиль взаимодействия компонентов распределённого приложения в сети.

Интересные Ссылки
https://www.tutorialspoint.com/restful/restful_jax_rs.htm

https://ru.wikipedia.org/wiki/REST
CRUD  Create, Read, Update, Delite
HTTP Pust,Get, Put,Delit
URI = URL + URN

URI (/ˌjuː ɑːr ˈaɪ/ англ. Uniform Resource Identifier) — унифицированный (единообразный) идентификатор ресурса.
URI — последовательность символов, идентифицирующая абстрактный или физический ресурс. Ранее назывался Universal Resource Identifier — универсальный идентификатор ресурса.

Унифицированный указатель ресурса (от англ. Uniform Resource Locator, сокр.
 URL [ˌjuː ɑːr ˈel]) — система унифицированных адресов электронных ресурсов, или единообразный определитель местонахождения ресурса (файла)[1].


https://download.oracle.com/otndocs/jcp/jaxrs-2_0-fr-eval-spec
Resourse Class              - Класс с медодами имеющими доступа к ресурсу.
Request method designator   - Обозначатель, (Аннатация) Метод внутри класса реализует определенную команду(Метод Get, Post Put...)
Resourse metod              - Выполняет функционал  методов Request method designator

Спецификация Jersey
в pom.xml добавляем библиотеки
<!--        для разбора HTTP запроса-->
        <dependency>
            <groupId>org.glassfish.jersey.containers</groupId>
            <artifactId>jersey-container-servlet</artifactId>
            <version>2.28</version>
        </dependency>

<!--        Библиотека для работы аннатаций-->
        <dependency>
            <groupId>org.glassfish.jersey.inject</groupId>
            <artifactId>jersey-hk2</artifactId>
            <version>2.28</version>
        </dependency>

Конфигурация сервлета принимающего ВСЕ запросы
добавляем web.xml
    <servlet>
        <servlet-name>JerseyServlet</servlet-name>
        <servlet-class>org.glassfish.jersey.servlet.ServletContainer</servlet-class>
        <init-param>
            <param-name>jersey.config.server.provider.packages</param-name>
            <param-value>edu.javacours.city.web</param-value>
        </init-param>
        <init-param>
            <param-name>jersey.config.server.provider.scanning.recursive</param-name>
            <param-value>false</param-value>
        </init-param>
    </servlet>
    <servlet-mapping>
        <servlet-name>JerseyServlet</servlet-name>
        <url-pattern>/rest/*</url-pattern>
    </servlet-mapping>

    И создаем класс CheckPersonService
            package edu.javacours.city.web;

            import javax.ws.rs.GET;
            import javax.ws.rs.Path;

            @Path("/check")
            public class CheckPersonService {
                @GET
                public  String checkPerson(){
                    return "Simpl String";
                }
              }

Переходим в браузер и набираем : http://localhost:8080/city-register-1.0/rest/check



Выпуск 104. ReST - входные и выходные параметры.
https://www.youtube.com/watch?v=53WOKrujc6c&list=PLyxk-1FCKqockmP-fXZmHQ7UlYP3qvZRa&index=104

http://localhost:8080/city-register-1.0/rest/check/101/simple ?name1=value1$name2=valume2
path параметры
параметры Имя - значение


конструктор  на :

    @GET
    @Path("/{id}")
    public  String checkPerson(@PathParam("id") int simpleId, @QueryParam("name") String simpleName){
        return "Simpl QueryParam" + simpleId + " : " + simpleName;
    }




И при наборе в браузере :
      localhost:8080/city-register-1.0/rest/check/101?name=value

Получаем :
Результат будет : Simpl QueryParam101 : value


начитая с 9 минуты:

немного меняем
CheckPersonService

    @GET
    @Path("/{id}")
    //    аннатация о том что ответ будет преобразовываться в тип  в JSON
    @Produces(MediaType.APPLICATION_JSON)
    public PersonResponse checkPerson(@PathParam("id") int simpleId, @QueryParam("name") String simpleName){

        return new PersonResponse();
    }
и добавляем библиотеки
в pom.xml

<!--        Библиотека для преобразования обьектов в xml или jason   обратно -  jersey-media-moxy-->
        <dependency>
            <groupId>org.glassfish.jersey.media</groupId>
            <artifactId>jersey-media-moxy</artifactId>
            <version>${jersey.version}</version>
        </dependency>
<!--        для корректной работы библиотеки Библиотека ersey-media-moxy необходима библиотека javax.xml.bind-->
        <dependency>
            <groupId>javax.xml.bind</groupId>
            <artifactId>jaxb-api</artifactId>
            <version>${jaxb.version}</version>
        </dependency>

        и версию

        <properties>
                <jaxb.version>2.3.1</jaxb.version>
            </properties>



При вводе в браузере :
http://localhost:8080/city-register-1.0/rest/check/108?name=Dfcbkmtd
 Получаем:
 {"registered":false,"temporal":false}


Выпуск 105. ReST - параметры со сложными полями.
https://www.youtube.com/watch?v=kCmXwh5fSi0&list=PLyxk-1FCKqockmP-fXZmHQ7UlYP3qvZRa&index=105

в Файле public class CheckPersonService {
заменили :
            @GET
         //    аннатация для преобразования  ответа в Jason
             @Produces(MediaType.APPLICATION_JSON)
             public PersonRequest checkPerson(){
                 PersonRequest pr = new PersonRequest();
                 pr.setSurName("Васильев");
                 pr.setGivenName("Павел");
                 pr.setPatronymic("Николаевич");
                 pr.setDateOfBird(LocalDate.of(1995, 3, 18));
                 pr.setStreetCode(1);
                 pr.setBuilding("10");
                 pr.setExtension("2");
                 pr.setApartment("121");
                 return pr;
             }

В браузере набираем:
//localhost:8080/city-register-1.0/rest/check
 И получаем:

         apartment	"121"
         building	"10"
         dateOfBird	"1995-03-18"
         extension	"2"
         givenName	"Павел"
         patronymic	"Николаевич"
         streetCode	1
         surName	"Васильев"


 5-00 По представлению ДАТ.
 классы адапторы:



запрос в PostMan
//localhost:8080/city-register-1.0/rest/check

{
  apartment	"121"
  building	"10"
  dateOfBird	"18.03.1995"
  extension	"2"
  givenName	"Павел"
  patronymic	"Николаевич"
  streetCode	1
  surName	"Васильев"
}

Скриншот результата здесь!
pictures/Снимок экрана от 2022-08-07 20-27-29.png




Теперь попытаемся сформировать  ответ на любой запрос.
@POST
    //    аннатация для потребления  запроса  в Jason
    @Consumes(MediaType.APPLICATION_JSON)
    //    аннатация для преобразования  ответа в Jason
    @Produces(MediaType.APPLICATION_JSON)
    public PersonResponse checkPerson(){
        PersonResponse personResponse = new PersonResponse();
        personResponse.setStatus("Respons Сформирован");
        personResponse.setTemporal(true);
        personResponse.setRegistered(true);

        logger.info("personResponse  : " + personResponse);
        return personResponse;
    }


    результат
    pictures/Снимок экрана от 2022-08-07 21-28-34.png
    